/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  FundingStatus: "CAMPAIGNING" | "END" | "POST_CAMPAIGN" | "PRE_CAMPAIGN"
  Role: "ADMIN" | "INVESTOR" | "MANAGER"
  TransactionCashType: "RETURN" | "TRANSFER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  DateTime: any
}

export interface NexusGenObjects {
  AccountBond: { // root type
    balance: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AccountCash: { // root type
    balance: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Artist: { // root type
    age?: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Artwork: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    initialPrice: NexusGenScalars['BigInt']; // BigInt!
    isSold: boolean; // Boolean!
    sellingPrice: NexusGenScalars['BigInt']; // BigInt!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Auth: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Contract: { // root type
    artworksRequiredNumber: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    price: NexusGenScalars['BigInt']; // BigInt!
    terms: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Funding: { // root type
    accountBond?: NexusGenRootTypes['AccountBond'] | null; // AccountBond
    bondPrice: NexusGenScalars['BigInt']; // BigInt!
    bondTotalNumber: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    status: NexusGenEnums['FundingStatus']; // FundingStatus!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  Query: {};
  TransactionBond: { // root type
    amount: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TransactionCash: { // root type
    amount: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    title: string; // String!
    type: NexusGenEnums['TransactionCashType']; // TransactionCashType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AccountBond: { // field return type
    balance: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    funding: NexusGenRootTypes['Funding'] | null; // Funding
    id: number; // Int!
    owner: NexusGenRootTypes['User'] | null; // User
    transactionRcvd: NexusGenRootTypes['TransactionBond'][]; // [TransactionBond!]!
    transactionSent: NexusGenRootTypes['TransactionBond'][]; // [TransactionBond!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  AccountCash: { // field return type
    balance: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    owner: NexusGenRootTypes['User'] | null; // User
    transactionRcvd: NexusGenRootTypes['TransactionCash'][]; // [TransactionCash!]!
    transactionSent: NexusGenRootTypes['TransactionCash'][]; // [TransactionCash!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Artist: { // field return type
    age: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fundings: NexusGenRootTypes['Funding'][]; // [Funding!]!
    id: number; // Int!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Artwork: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    funding: NexusGenRootTypes['Funding'] | null; // Funding
    id: number; // Int!
    initialPrice: NexusGenScalars['BigInt']; // BigInt!
    isSold: boolean; // Boolean!
    sellingPrice: NexusGenScalars['BigInt']; // BigInt!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Auth: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Contract: { // field return type
    artworksRequiredNumber: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    funding: NexusGenRootTypes['Funding'] | null; // Funding
    id: number; // Int!
    price: NexusGenScalars['BigInt']; // BigInt!
    terms: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Funding: { // field return type
    accountBond: NexusGenRootTypes['AccountBond'] | null; // AccountBond
    artist: NexusGenRootTypes['Artist'] | null; // Artist
    artworks: NexusGenRootTypes['Artwork'][]; // [Artwork!]!
    bondPrice: NexusGenScalars['BigInt']; // BigInt!
    bondTotalNumber: NexusGenScalars['BigInt']; // BigInt!
    contract: NexusGenRootTypes['Contract'] | null; // Contract
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    status: NexusGenEnums['FundingStatus']; // FundingStatus!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: { // field return type
    signin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    balanceCash: NexusGenScalars['BigInt'] | null; // BigInt
    transactionsCash: NexusGenRootTypes['TransactionCash'][]; // [TransactionCash!]!
    user: NexusGenRootTypes['User'] | null; // User
  }
  TransactionBond: { // field return type
    amount: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    receiver: NexusGenRootTypes['AccountBond'] | null; // AccountBond
    sender: NexusGenRootTypes['AccountBond'] | null; // AccountBond
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TransactionCash: { // field return type
    amount: NexusGenScalars['BigInt']; // BigInt!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    receiver: NexusGenRootTypes['AccountCash'] | null; // AccountCash
    sender: NexusGenRootTypes['AccountCash'] | null; // AccountCash
    title: string; // String!
    type: NexusGenEnums['TransactionCashType']; // TransactionCashType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    accountCash: NexusGenRootTypes['AccountCash'] | null; // AccountCash
    accountsBond: NexusGenRootTypes['AccountBond'][]; // [AccountBond!]!
    auth: NexusGenRootTypes['Auth'] | null; // Auth
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  AccountBond: { // field return type name
    balance: 'BigInt'
    createdAt: 'DateTime'
    funding: 'Funding'
    id: 'Int'
    owner: 'User'
    transactionRcvd: 'TransactionBond'
    transactionSent: 'TransactionBond'
    updatedAt: 'DateTime'
  }
  AccountCash: { // field return type name
    balance: 'BigInt'
    createdAt: 'DateTime'
    id: 'Int'
    owner: 'User'
    transactionRcvd: 'TransactionCash'
    transactionSent: 'TransactionCash'
    updatedAt: 'DateTime'
  }
  Artist: { // field return type name
    age: 'Int'
    createdAt: 'DateTime'
    fundings: 'Funding'
    id: 'Int'
    name: 'String'
    updatedAt: 'DateTime'
  }
  Artwork: { // field return type name
    createdAt: 'DateTime'
    funding: 'Funding'
    id: 'Int'
    initialPrice: 'BigInt'
    isSold: 'Boolean'
    sellingPrice: 'BigInt'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Auth: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    updatedAt: 'DateTime'
    user: 'User'
  }
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Contract: { // field return type name
    artworksRequiredNumber: 'Int'
    createdAt: 'DateTime'
    funding: 'Funding'
    id: 'Int'
    price: 'BigInt'
    terms: 'Int'
    updatedAt: 'DateTime'
  }
  Funding: { // field return type name
    accountBond: 'AccountBond'
    artist: 'Artist'
    artworks: 'Artwork'
    bondPrice: 'BigInt'
    bondTotalNumber: 'BigInt'
    contract: 'Contract'
    createdAt: 'DateTime'
    id: 'Int'
    status: 'FundingStatus'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    signin: 'AuthPayload'
    signup: 'AuthPayload'
  }
  Query: { // field return type name
    balanceCash: 'BigInt'
    transactionsCash: 'TransactionCash'
    user: 'User'
  }
  TransactionBond: { // field return type name
    amount: 'BigInt'
    createdAt: 'DateTime'
    id: 'Int'
    receiver: 'AccountBond'
    sender: 'AccountBond'
    title: 'String'
    updatedAt: 'DateTime'
  }
  TransactionCash: { // field return type name
    amount: 'BigInt'
    createdAt: 'DateTime'
    id: 'Int'
    receiver: 'AccountCash'
    sender: 'AccountCash'
    title: 'String'
    type: 'TransactionCashType'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    accountCash: 'AccountCash'
    accountsBond: 'AccountBond'
    auth: 'Auth'
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    name: 'String'
    role: 'Role'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    signin: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    transactionsCash: { // args
      skip?: number | null; // Int
      take?: number | null; // Int
      type?: string | null; // String
    }
    user: { // args
      email?: string | null; // String
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}