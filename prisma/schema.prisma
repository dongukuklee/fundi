generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity","fullTextSearch","fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Auth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  email     String   @unique
  password String?
  nickName      String?
  user      User?
  pincode   String? 
  isVerified Boolean @default(false)
  IDVerification IDVerification?
  withdrawalAccount WithdrawalAccount?
}

model IDVerification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  expiration DateTime 
  birthDay  DateTime
  gender    Int //1, 3 male && 2, 4 female
  name      String
  phoneNumber String
  certificationCode String
  auth         Auth          @relation(fields: [authId], references: [id])
  authId       Int           @unique
}
model WithdrawalAccount {
   id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bankCode String
  acntNo String
  auth         Auth          @relation(fields: [authId], references: [id])
  authId       Int           @unique
}

model VirtualAccount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vbankExpDate String @default("")
  tid String
  goodsName String
  amt String
  moid String
  currency String
  buyerName String
  authDate String
  vbankNum String
  vbankBankNm String
  user User @relation(fields: [userId] ,references: [id])
  userId Int
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  nickName         String?
  role         Role          @default(INVESTOR)
  auth         Auth          @relation(fields: [authId], references: [id] )
  authId       Int           @unique
  likeFundings  FundingOnUser[] 
  likedCreator  CreatorOnUser[]
  accountCash  AccountCash? 
  accountsBond AccountBond[]
  qna              QnA[]
  alarm       Alarm[]
  virtualAccount VirtualAccount[]
  accountTransfer AccountTransfer[]
  trade   Trade[]
}

model Alarm{
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  title                      String
  content                    String
  user                       User @relation(fields: [userId], references: [id])
  userId                     Int
  sentTime                   DateTime 
  type                       AlarmTypes @default(NOTICE)
  isConfirm                  Boolean @default(false)
  isVisible                  Boolean @default(true)
}

enum Role {
  ADMIN
  MANAGER
  INVESTOR
}

model AccountCash {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  owner        User              @relation(fields: [ownerId], references: [id])
  ownerId      Int               @unique
  balance      BigInt            @default(0)
  transactions TransactionCash[]
}

model TransactionCash {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String
  account   AccountCash     @relation(fields: [accountId], references: [id])
  accountId Int
  amount    BigInt
  accumulatedCash BigInt   @default(0)
  type      TransactionType
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model AccountBond {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  owner        User              @relation(fields: [ownerId], references: [id])
  ownerId      Int
  balance      BigInt            @default(0)  
  transactions TransactionBond[]
  settlementTransactions TransactionSettlement[]
  funding      Funding?          @relation(fields: [fundingId], references: [id])
  fundingId    Int
}

model AccountTransfer{
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  status       AccountTransferTypes @default(PENDING)
  bankCode     String
  acntNo       String
  amt          String
  user         User @relation(fields: [userId], references: [id])
  userId       Int
  userBirthDay String @default("")
  transDt String @default("")
  resultMsg String @default("")
}

model TransactionBond {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String
  account   AccountBond     @relation(fields: [accountId], references: [id])
  accountId Int
  amount    BigInt
  type      TransactionType
}

model Creator{
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  channelTitle String @default("")
  channelUrl  String @default("")
  description String @default("")
  birthYear Int @default(2002)  
  isVisible Boolean @default(false)
  fundings CreatorOnFundings[]
  contract Contract[]
  likedUser    CreatorOnUser[]
  images     Image[]
  creatorMonthlyInfo CreatorMonthlyInfo[]
}

model CreatorMonthlyInfo{
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  month     DateTime
  subscriber BigInt
  income BigInt
  views BigInt
  creator Creator @relation(fields: [creatorId],references: [id])
  creatorId Int
}

model Contract {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt  
  lastYearEarning        BigInt
  fundingAmount          BigInt   
  amountRecieved         BigInt
  funding                Funding?
  type                   ContractTypes @default(LOANS)
  terms                  Int      @default(12)
  creator                Creator     @relation(fields: [creatorId], references: [id])
  creatorId              Int
  startDate              DateTime
  endDate                DateTime
}

model Funding {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  status           FundingStatus @default(PRE_CAMPAIGN)
  title            String
  description      FundingDescription[]
  contract         Contract      @relation(fields: [contractId], references: [id])
  contractId       Int           @unique
  isVisible        Boolean       @default(false)
  creator CreatorOnFundings[]
  likedUser        FundingOnUser[]  
  startDate        DateTime
  endDate          DateTime
  currentSettlementRound Int     @default(0)
  bondPrice        BigInt        @default(10000)
  lastTransactionAmount BigInt   @default(0)
  bondsTotalNumber BigInt        @default(10000)
  remainingBonds   BigInt        @default(10000)
  fundingSettlement FundingSettlement[]
  accountsBond     AccountBond[]  
  images     Image[]
  trade   Trade[]
}

model Trade{
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  price            BigInt
  funding   Funding  @relation(fields: [fundingId],references: [id])
  fundingId Int
  user   User  @relation(fields: [userId],references: [id])
  userId Int
  type TradeType 
  status TradeStatus @default(SELLING)
}

model FundingResult {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  recruitmentAmount BigInt
}

model FundingDescription{
  id               Int           @id @default(autoincrement())
  title            String
  content          String
  funding          Funding  @relation(fields: [fundingId],references: [id])
  fundingId        Int
}

model FundingSettlement {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  funding          Funding       @relation(fields: [fundingId], references: [id])
  fundingId        Int
  round            Int
  monthlySettlementAmount BigInt
}

enum FundingStatus {
  PRE_CAMPAIGN // startDate 이전
  CAMPAIGNING // 펀딩 모집 중
  POST_CAMPAIGN // endDate 후, 정산 진행 중 
  EARLY_CLOSING // 조기 마감, endDate 이전에 100% 가 됐을 시
  END // endDate 이후 계약 만료 시 (정산 완료)
}

enum ContractTypes {
  OWENERSHIP_TRANSFER
  LOANS
}

enum TradeStatus {
  SELLING
  SOLD
  CANCELLATION
}

enum TradeType {
  BUY
  SELL
}

model TransactionSettlement{
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  account                    AccountBond     @relation(fields: [accountId], references: [id])
  accountId                  Int    
  round                      Int    
  settlementAmount           BigInt  
  additionalSettleMentAmount BigInt  
}



model CreatorOnFundings{  
  creator Creator @relation(fields: [creatorId], references: [id])
  creatorId Int 
  funding Funding @relation(fields: [fundingId], references: [id])
  fundingId Int
  @@id([creatorId,fundingId])
}




 
model CreatorOnUser{  
  creator Creator @relation(fields: [creatorId],references: [id])
  creatorId Int 
  user User @relation(fields: [userId],references: [id])
  userId Int 
  @@id([creatorId,userId])
}
 

model FundingOnUser{
  funding Funding @relation(fields: [fundingId], references: [id])
  fundingId Int 
  user User @relation(fields: [userId],references: [id])
  userId Int 
  @@id([fundingId,userId])
}

model Notice{
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  isVisible                  Boolean  @default(false)
  type                       NoticeType @default(NOTICE)
  title                      String
  content                    String @db.Text()
  images     Image[]
}

model QnA {
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User @relation(fields: [userId],references: [id])
  userId                     Int 
  isVisible                  Boolean @default(true)
  type                       QnATypes @default(INVESTMENT)
  status                     QnAStatus @default(AWAITING_RESPONSE)
  title                      String
  content                    String
  reply                      String?
  images     Image[]
}

model FAQ{
   id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  isVisible                  Boolean @default(false)
  type                       FAQTypes @default(ETC)
  question                   String
  answer                    String
   
}

model Image {
  id                       Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  width                      Int
  height                     Int
  filename                   String
  path_origin                String
  path_w640                  String
  path_sq640                 String
  creator   Creator?  @relation(fields: [creatorId],references: [id])
  creatorId Int?
  funding   Funding?  @relation(fields: [fundingId],references: [id])
 fundingId Int?
  notice    Notice?  @relation(fields: [noticeId],references: [id])
  noticeId Int?
  qna   QnA?  @relation(fields: [qnaId],references: [id])
  qnaId Int?
  banner   BannerModule?  @relation(fields: [bannerId],references: [id])
  bannerId Int? @unique
}

model BannerModule {
  id                       Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  title                    String @default("")
  images                     Image?
  types                      BannerTypes @default(FUNDING)
  targetId                   Int  
  isVisible                 Boolean @default(false)
  banner  Banner? @relation(fields: [bannerId], references: [id])
  bannerId Int? @unique
}


model Banner {
  id                       Int      @id @default(autoincrement())
  banners                  BannerModule?
}

model DeviceToken {
  id                       Int      @id @default(autoincrement())
  Token                    String
}

model SchedulerBackUp {
  id                       Int      @id @default(autoincrement())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  fundingId                Int
  endDate                  DateTime
}

enum BannerTypes {
  FUNDING
  NOTICE
  NONE
}

enum AccountTransferTypes {
  PENDING
  DONE
  CANCELLATION
}

enum QnATypes {
  INVESTMENT
  ETC
  SETTLEMENT
}

enum FAQTypes {
  USAGE
  PAYMENT
  ETC
}

enum NoticeType {
  NOTICE
  MAGAZINE
}

enum QnAStatus {
  AWAITING_RESPONSE
  RESPONDED  
}

enum AlarmTypes {
  NOTICE
  FUNDING
  QNA
  ETC
}

