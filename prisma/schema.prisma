generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Auth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  password  String
  user      User?
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  name         String?
  role         Role          @default(INVESTOR)
  auth         Auth          @relation(fields: [authId], references: [id])
  authId       Int           @unique
  accountCash  AccountCash?
  accountsBond AccountBond[]
  fundings     Funding[]
}

enum Role {
  ADMIN
  MANAGER
  INVESTOR
}

model AccountCash {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  owner        User              @relation(fields: [ownerId], references: [id])
  ownerId      Int               @unique
  balance      BigInt            @default(0)
  transactions TransactionCash[]
}

model TransactionCash {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String
  account   AccountCash     @relation(fields: [accountId], references: [id])
  accountId Int
  amount    BigInt
  type      TransactionType
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model AccountBond {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  owner        User              @relation(fields: [ownerId], references: [id])
  ownerId      Int
  balance      BigInt            @default(0)
  transactions TransactionBond[]
  funding      Funding?          @relation(fields: [fundingId], references: [id])
  fundingId    Int
}

model TransactionBond {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String
  account   AccountBond     @relation(fields: [accountId], references: [id])
  accountId Int
  amount    BigInt
  type      TransactionType
}

model Funding {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  title           String
  artist          Artist?       @relation(fields: [artistId], references: [id])
  artistId        Int
  contract        Contract?
  bondPrice       BigInt        @default(10000)
  bondTotalNumber BigInt        @default(10000)
  status          FundingStatus @default(PRE_CAMPAIGN)
  accountsBond    AccountBond[]
  artworks        Artwork[]
  investors       User[]
}

enum FundingStatus {
  PRE_CAMPAIGN
  CAMPAIGNING
  POST_CAMPAIGN
  END
}

model Artist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  age       Int?
  fundings  Funding[]
}

model Contract {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  funding                Funding? @relation(fields: [fundingId], references: [id])
  fundingId              Int      @unique
  price                  BigInt   @default(100000000)
  terms                  Int      @default(12)
  artworksRequiredNumber Int      @default(12)
}

model Artwork {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  funding      Funding? @relation(fields: [fundingId], references: [id])
  fundingId    Int
  initialPrice BigInt   @default(0)
  sellingPrice BigInt   @default(0)
  isSold       Boolean  @default(false)
}
