generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int              @id @default(autoincrement())
  role            Role             @default(INVESTOR)
  auth            Auth?
  accountCash     AccountCash?
  accountFundings AccountFunding[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  INVESTOR
}

model Auth {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountCash {
  id               Int           @id @default(autoincrement())
  owner            User          @relation(fields: [ownerId], references: [id])
  ownerId          Int           @unique
  balance          BigInt        @default(0)
  transactionsSent Transaction[] @relation(name: "CashSender")
  transactionsRcvd Transaction[] @relation(name: "CashReceiver")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Transaction {
  id              Int             @id @default(autoincrement())
  title           String
  sender          AccountCash     @relation(name: "CashSender", fields: [senderId], references: [id])
  senderId        Int
  receiver        AccountCash     @relation(name: "CashReceiver", fields: [receiverId], references: [id])
  receiverId      Int
  amount          BigInt
  transactionType TransactionType @default(TRANSFER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum TransactionType {
  TRANSFER
  RETURN
}

model AccountFunding {
  id         Int      @id @default(autoincrement())
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    Int
  balance    BigInt   @default(0)
  funding    Funding  @relation(fields: [fundingId], references: [id])
  fundingId  Int
  tradesSent Trade[]  @relation(name: "FundingSender")
  tradesRcvd Trade[]  @relation(name: "FundingReceiver")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Trade {
  id         Int            @id @default(autoincrement())
  title      String
  sender     AccountFunding @relation("FundingSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   AccountFunding @relation("FundingReceiver", fields: [receiverId], references: [id])
  receiverId Int
  amount     BigInt
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Funding {
  id              Int              @id @default(autoincrement())
  title           String
  artist          Artist           @relation(fields: [artistId], references: [id])
  artistId        Int
  contract        Contract         @relation(fields: [contractId], references: [id])
  contractId      Int              @unique
  bondPrice       BigInt
  bondTotalNumber BigInt
  fundingStatus   FundingStatus    @default(PRE_CAMPAIGN)
  accountFundings AccountFunding[]
  artworks        Artwork[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum FundingStatus {
  PRE_CAMPAIGN
  CAMPAIGNING
  POST_CAMPAIGN
  END
}

model Artist {
  id        Int       @id @default(autoincrement())
  name      String
  age       Int
  fundings  Funding[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Contract {
  id                     Int      @id @default(autoincrement())
  funding                Funding?
  price                  BigInt
  terms                  Int
  artworksRequiredNumber Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Artwork {
  id           Int      @id @default(autoincrement())
  title        String
  funding      Funding  @relation(fields: [fundingId], references: [id])
  fundingId    Int
  initialPrice BigInt
  sellingPrice BigInt
  isSold       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
