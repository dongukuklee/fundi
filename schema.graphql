### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountBond {
  balance: BigInt!
  createdAt: DateTime!
  funding: Funding
  id: Int!
  owner: User
  transactions: [TransactionBond!]!
  updatedAt: DateTime!
}

type AccountCash {
  balance: BigInt!
  createdAt: DateTime!
  id: Int!
  owner: User
  transactions: [TransactionCash!]!
  updatedAt: DateTime!
}

type Artist {
  age: Int
  createdAt: DateTime!
  fundings: [Funding!]!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Artwork {
  createdAt: DateTime!
  funding: Funding
  id: Int!
  initialPrice: BigInt!
  isSold: Boolean!
  sellingPrice: BigInt!
  title: String!
  updatedAt: DateTime!
}

type Auth {
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User
}

type AuthPayload {
  token: String!
  user: User!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Contract {
  artworksRequiredNumber: Int!
  createdAt: DateTime!
  funding: Funding
  id: Int!
  price: BigInt!
  terms: Int!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Funding {
  accountBond: AccountBond
  artist: Artist
  artworks: [Artwork!]!
  bondPrice: BigInt!
  bondTotalNumber: BigInt!
  contract: Contract
  createdAt: DateTime!
  id: Int!
  remainingBonds: [Int]
  status: FundingStatus!
  title: String!
  updatedAt: DateTime!
}

"""Define funding status"""
enum FundingStatus {
  CAMPAIGNING
  END
  POST_CAMPAIGN
  PRE_CAMPAIGN
}

type Mutation {
  emailAuthentication(email: String!): String
  fundParticipation(balance: Int!, id: Int!): Funding
  signin(email: String!, password: String!): AuthPayload!
  signup(email: String!, password: String!): AuthPayload!
}

type Query {
  artist(id: Int!): Artist
  artists(skip: Int, take: Int): [Artist]
  artwork(id: Int!): Artwork
  artworks(id: Int!): [Artwork]
  balanceCash: BigInt
  emailCheck(email: String!): Auth!
  funding(id: Int!): Funding
  fundingList(skip: Int, take: Int): [Funding]
  myFundings(skip: Int, take: Int): [Funding!]!
  transactionsBond(ids: [Int], skip: Int, take: Int, type: TransactionType): [TransactionBond!]!
  transactionsCash(skip: Int, take: Int, type: TransactionType): [TransactionCash!]!
  user(email: String, id: Int): User
  verificationCode(email: String!, verificationCode: String!): Boolean!
}

"""Define user roles"""
enum Role {
  ADMIN
  INVESTOR
  MANAGER
}

type TransactionBond {
  account: AccountBond
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type TransactionCash {
  account: AccountCash
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

"""Define transaction types - DEPOSIT and WITHDRAW"""
enum TransactionType {
  DEPOSIT
  WITHDRAW
}

type User {
  accountCash: AccountCash
  accountsBond: [AccountBond!]!
  auth: Auth
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  role: Role!
  updatedAt: DateTime!
}