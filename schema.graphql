### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountBond {
  balance: BigInt!
  createdAt: DateTime!
  funding: Funding
  fundingId: Int!
  id: Int!
  investmentAmount: BigInt
  owner: User
  ownerId: Int!
  settlementAmount: [BigInt]
  transactionSettlement: [TransactionSettlement!]!
  transactions: [TransactionBond!]!
  updatedAt: DateTime!
}

type AccountCash {
  balance: BigInt!
  createdAt: DateTime!
  id: Int!
  owner: User
  transactions: [TransactionCash!]!
  updatedAt: DateTime!
}

type AccountTransfer {
  accountTransfer(id: Int!): AccountTransfer
  accountTransfers: [AccountTransfer]
  acntNo: String!
  amt: String!
  bankCode: String!
  createdAt: DateTime!
  id: Int!
  myAccountTransfer: AccountTransfer
  myAccountTransfers: [AccountTransfer]
  updatedAt: DateTime!
}

type Alarm {
  content: String!
  createdAt: DateTime!
  id: Int!
  isConfirm: Boolean!
  isVisible: Boolean!
  sentTime: DateTime!
  title: String!
  type: AlarmTypes!
  updatedAt: DateTime!
}

input AlarmInputData {
  content: String
  isConfirm: Boolean
  isVisible: Boolean
  title: String
  type: AlarmTypes
}

"""Define alarm types"""
enum AlarmTypes {
  FUNDING
  NOTICE
  QNA
}

type Auth {
  IDVerification: IDVerification
  createdAt: DateTime!
  email: String!
  id: Int!
  isVerified: Boolean!
  nickName: String
  pincode: String
  updatedAt: DateTime!
  user: User
  withdrawalAccount: WithdrawalAccount
}

type AuthPayload {
  token: String!
  user: User!
}

type Banner {
  banner: BannerModule
  id: Int!
}

type BannerModule {
  createdAt: DateTime!
  id: Int!
  images: Image
  isVisible: Boolean!
  targetId: Int
  title: String!
  types: BannerTypes
  updatedAt: DateTime!
}

"""Define ContractStatus"""
enum BannerTypes {
  FUNDING
  NONE
  NOTICE
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Contract {
  amountRecieved: BigInt!
  createdAt: DateTime!
  creator: Creator
  endDate: DateTime!
  funding: Funding
  id: Int!
  lastYearEarning: BigInt!
  startDate: DateTime!
  terms: Int!
  type: ContractTypes!
  updatedAt: DateTime!
}

input ContractInput {
  endDate: String!
  lastYearEarning: Int!
  startDate: String!
  terms: Int!
  type: ContractTypes!
}

"""Define ContractStatus"""
enum ContractTypes {
  LOANS
  OWENERSHIP_TRANSFER
}

type Creator {
  birthYear: Int
  channelTitle: String!
  channelUrl: String!
  contract: [Contract]
  createdAt: DateTime!
  creatorMonthlyInfo: [CreatorMonthlyInfo]
  description: String!
  fundings: [Funding!]!
  id: Int!
  images: [Image]
  isLikedUser: Boolean
  isVisible: Boolean!
  likedUser: [User]
  name: String
  updatedAt: DateTime!
}

input CreatorInput {
  birthYear: Int
  channelTitle: String
  channelUrl: String
  description: String
  isVisible: Boolean
  name: String
}

type CreatorMonthlyInfo {
  createdAt: DateTime!
  id: Int!
  income: BigInt!
  month: DateTime!
  subscriber: BigInt!
  updatedAt: DateTime!
  views: BigInt!
}

input CreatorMonthlyInfoInpuTypes {
  income: BigInt
  month: String
  subscriber: BigInt
  views: BigInt
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FAQ {
  answer: String
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  question: String
  type: FAQTypes!
  updatedAt: DateTime!
}

"""Define FAQ Types"""
enum FAQTypes {
  ETC
  PAYMENT
  USAGE
}

type Funding {
  accountInvestor: [AccountBond!]!
  accountManager: AccountBond
  bondPrice: BigInt!
  bondsTotalNumber: BigInt!
  contract: Contract
  createdAt: DateTime!
  creator: [Creator]
  currentSettlementRound: Int!
  description: [FundingDescripton]
  endDate: DateTime
  fundingSettlement: [FundingSettlement]
  id: Int!
  images: [Image]
  isLikedUser: Boolean
  lastTransactionAmount: BigInt!
  likedUser: [User]
  remainingBonds: BigInt!
  startDate: DateTime
  status: FundingStatus!
  title: String!
  updatedAt: DateTime!
}

input FundingDescriptionInputTypes {
  content: String!
  id: Int
  title: String!
}

type FundingDescripton {
  content: String!
  id: Int
  title: String!
}

input FundingInput {
  description: [FundingDescriptionInputTypes!]
  endDate: String!
  isVisible: Boolean!
  startDate: String!
  status: FundingStatus! = PRE_CAMPAIGN
  title: String!
}

type FundingSettlement {
  createdAt: DateTime!
  id: Int!
  monthlySettlementAmount: BigInt!
  round: Int!
  updatedAt: DateTime!
}

"""Define funding status"""
enum FundingStatus {
  CAMPAIGNING
  EARLY_CLOSING
  END
  FAILED_CAMPAIGN
  POST_CAMPAIGN
  PRE_CAMPAIGN
}

type IDVerification {
  birthDay: DateTime!
  certificationCode: String!
  createdAt: DateTime!
  expiration: DateTime!
  gender: Int!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Image {
  createdAt: DateTime!
  creator: Creator
  filename: String!
  funding: Funding
  height: Int!
  id: Int!
  notice: Notice
  origin: String!
  qna: QnA
  sq640: String!
  updatedAt: DateTime!
  w640: String!
  width: Int!
}

input ImageInput {
  filename: String!
  height: Int!
  path_origin: String!
  path_sq640: String!
  path_w640: String!
  width: Int!
}

"""Define ImageTypes"""
enum ImageTypes {
  CREATOR
  FUNDING
  NOTICE
  QNA
}

type Mutation {
  OAuthLogin(deviceToken: String!, email: String!, nickName: String, type: String): AuthPayload
  alterSequence(ids: [Int!]!): Boolean
  chargeTheDeposit(amount: Int!): AccountCash
  checkAlarm: Boolean
  createBanner(id: Int!, sequence: Int!): Banner
  createBannerModule(imageInput: ImageInput, isVisible: Boolean!, targetId: Int!, title: String!, types: BannerTypes!): BannerModule
  createContract(contractInput: ContractInput, creatorId: Int!): Contract
  createCreator(creatorInput: CreatorInput, imageInput: ImageInput): Creator
  createCreatorMonthlyInfos(creatorId: Int!, creatorMonthlyInfoInput: CreatorMonthlyInfoInpuTypes!): CreatorMonthlyInfo
  createFAQ(answer: String!, isVisible: Boolean, question: String!, type: FAQTypes!): FAQ
  createFunding(contractId: Int!, fundingInput: FundingInput, imageInput: ImageInput): Funding
  createImage(createImageInput: ImageInput, id: Int!, type: ImageTypes!): Image
  createNotice(content: String!, imageInput: ImageInput, title: String!): Notice
  createPincode(imp_uid: String!, pincode: String!): String
  createQnA(content: String!, imageInput: ImageInput, title: String!, type: QnATypes!): QnA
  createVirtualAccount(amt: String!): VirtualAccount
  fundingSettlement(amount: Int!, id: Int!): Funding
  likeCreator(id: Int!): Creator
  likeFunding(id: Int!): Funding
  makingMoneyTransfers(id: Int!): Boolean
  participateFunding(amount: Int!, id: Int!): Funding
  registerWithdrawalAccount(acntNo: String!, bankCode: String!): WithdrawalAccount
  replyQuestion(id: Int!, reply: String!): QnA
  signOut: Boolean
  signin(email: String!): AuthPayload!
  signup(email: String!, nickName: String): AuthPayload!
  updateBannerModule(id: Int!, imageInput: ImageInput, isVisible: Boolean, targetId: Int, types: BannerTypes): Boolean
  updateContract(contractId: Int!, contractInput: ContractInput): Contract
  updateCreator(creatorId: Int!, creatorInput: CreatorInput, imageInput: ImageInput): Boolean
  updateCreatorMonthlyInfo(creatorMonthlyInfoInput: CreatorMonthlyInfoInpuTypes!, id: Int!): CreatorMonthlyInfo
  updateFAQ(answer: String, id: Int!, isVisible: Boolean, question: String, type: FAQTypes): FAQ
  updateFunding(fundingId: Int, fundingInput: FundingInput, imageInput: ImageInput): Boolean
  updateNotice(content: String, id: Int!, imageInput: ImageInput, title: String): Boolean
  updatePincode(followingPincode: String!): String
  updateQuestion(content: String, id: Int!, imageInput: ImageInput, title: String, type: QnATypes): Boolean
  updateWithdrawalAccount(acntNo: String!, bankCode: String!, id: Int!): WithdrawalAccount
  withdrawFunding(id: Int!): AccountCash
  withdrawalApplication(amt: Int!): AccountTransfer
}

type Notice {
  content: String
  createdAt: DateTime!
  id: Int!
  images: [Image]
  isVisible: Boolean!
  title: String
  updatedAt: DateTime!
}

type QnA {
  content: String
  createdAt: DateTime!
  id: Int!
  images: [Image]
  isVisible: Boolean!
  reply: String
  title: String
  type: QnATypes!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

"""Define QnA Status"""
enum QnAStatus {
  AWAITING_RESPONSE
  RESPONDED
}

"""Define QnA Types"""
enum QnATypes {
  ETC
  INVESTMENT
  SETTLEMENT
}

type Query {
  FAQs(keyword: String, skip: Int, take: Int, type: FAQTypes): [FAQ]
  QnA(id: Int!): QnA
  QnAs: [QnA]
  alarmCount: Int
  alarms(skip: Int, take: Int): [Alarm]
  balanceCash: BigInt
  bannerModule(id: Int!): BannerModule
  bannerModules: [BannerModule]
  banners: [Banner]
  cancellationCharge(id: Int!): BigInt
  checkPincode(pincode: String!): Boolean
  creator(id: Int!): Creator
  creators(isVisible: Boolean, skip: Int, sort: String, take: Int): [Creator!]!
  funding(id: Int!): Funding
  fundings(skip: Int, sort: String, status: FundingStatus, take: Int): [Funding!]!
  getVirtualAccount: VirtualAccount
  getWithdrawalAccount: WithdrawalAccount
  myFundings(skip: Int, take: Int): [Funding!]!
  myQnA: [QnA]
  notice(id: Int!): Notice
  notices(skip: Int, take: Int): [Notice]
  transactionsBond(ids: [Int], skip: Int, take: Int, type: TransactionType): [TransactionBond!]!
  transactionsCash(skip: Int, take: Int, type: TransactionType): [TransactionCash!]!
  user: User
  users: [User]
  verificationCode(email: String!, verificationCode: String!): Boolean!
}

"""Define user roles"""
enum Role {
  ADMIN
  INVESTOR
  MANAGER
}

type TransactionBond {
  account: AccountBond
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type TransactionCash {
  account: AccountCash
  accumulatedCash: BigInt!
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type TransactionSettlement {
  account: AccountBond
  additionalSettleMentAmount: BigInt!
  createdAt: DateTime!
  id: Int!
  round: Int!
  settlementAmount: BigInt!
  updatedAt: DateTime!
}

"""Define transaction types - DEPOSIT and WITHDRAW"""
enum TransactionType {
  DEPOSIT
  WITHDRAW
}

type User {
  accountCash: AccountCash
  accountsBond: [AccountBond!]!
  alarm: [Alarm]
  auth: Auth
  createdAt: DateTime!
  email: String!
  favoriteCreators: [Creator]
  favoriteFundings: [Funding]
  id: Int!
  nickName: String
  role: Role!
  totalCumulativeInvestmentAmount: BigInt
  totalCumulativeSettlementAmount: BigInt
  updatedAt: DateTime!
}

type VirtualAccount {
  amt: String!
  authDate: String!
  buyerName: String!
  createdAt: DateTime!
  currency: String!
  goodsName: String!
  id: Int!
  moid: String!
  tid: String!
  updatedAt: DateTime!
  vbankBankNm: String!
  vbankExpDate: String!
  vbankNum: String!
}

type WithdrawalAccount {
  acntNo: String!
  bankCode: String!
  createdAt: DateTime!
  id: Int!
  name: String
  updatedAt: DateTime!
}