### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccountBond {
  balance: BigInt!
  createdAt: DateTime!
  funding: Funding
  id: Int!
  investmentAmount: BigInt
  owner: User
  settlementAmount: [BigInt]
  transactionSettlement: [TransactionSettlement!]!
  transactions: [TransactionBond!]!
  updatedAt: DateTime!
}

type AccountCash {
  balance: BigInt!
  createdAt: DateTime!
  id: Int!
  owner: User
  transactions: [TransactionCash!]!
  updatedAt: DateTime!
}

type Auth {
  IDVerification: IDVerification
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  pincode: String
  updatedAt: DateTime!
  user: User
  withdrawalAccount: WithdrawalAccount
}

type AuthPayload {
  token: String!
  user: User!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Biography {
  createdAt: DateTime!
  description: String!
  id: Int!
  updatedAt: DateTime!
  year: Int!
}

type Contract {
  amountRecieved: BigInt!
  createdAt: DateTime!
  endDate: DateTime!
  funding: Funding
  id: Int!
  lastYearEarning: BigInt!
  startDate: DateTime!
  terms: Int!
  type: ContractTypes!
  updatedAt: DateTime!
}

input ContractInput {
  endDate: String!
  lastYearEarning: Int!
  startDate: String!
  terms: Int!
  type: ContractTypes!
}

"""Define ContractStatus"""
enum ContractTypes {
  LOANS
  OWENERSHIP_TRANSFER
}

type Creator {
  age: Int
  createdAt: DateTime!
  description: String!
  fundings: [Funding!]!
  id: Int!
  isLikedUser: Boolean
  isVisible: Boolean!
  likedUser: [User]
  name: String!
  updatedAt: DateTime!
}

input CreatorInvestmentPoint {
  status: String!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Funding {
  accountInvestor: [AccountBond!]!
  accountManager: AccountBond
  bondPrice: BigInt!
  bondsTotalNumber: BigInt!
  createdAt: DateTime!
  creator: [Creator]
  endDate: DateTime
  id: Int!
  isLikedUser: Boolean
  likedUser: [User]
  remainingBonds: BigInt!
  startDate: DateTime
  status: FundingStatus!
  title: String!
  updatedAt: DateTime!
}

input FundingInput {
  endDate: String!
  intro: String
  isVisible: Boolean!
  startDate: String!
  status: FundingStatus! = PRE_CAMPAIGN
  title: String!
}

"""Define funding status"""
enum FundingStatus {
  CAMPAIGNING
  EARLY_CLOSING
  END
  FAILED_CAMPAIGN
  POST_CAMPAIGN
  PRE_CAMPAIGN
}

type IDVerification {
  createdAt: DateTime!
  id: Int!
  phoneNumber: String
  updatedAt: DateTime!
}

type Mutation {
  IDVerification(phoneNumber: String!): Auth
  OAuthLogin(email: String!, nickName: String, type: String): AuthPayload
  chargeTheDeposit(amount: Int!): AccountCash
  createContract(contractInput: ContractInput, creatorId: Int!): Contract
  createCreator(age: Int!, channelTitle: String!, channelUrl: String!, name: String!): Creator
  createFunding(contractId: Int!, fundingInput: FundingInput): Funding
  createNotice(content: String!, title: String!): Notice
  createPincode(pincode: String!): String
  createQnA(content: String!, title: String!, type: QnATypes!): QnA
  fundingSettlement(amount: Int!, id: Int!): Funding
  likeCreator(id: Int!): Creator
  likeFunding(id: Int!): Funding
  participateFunding(amount: Int!, id: Int!): AccountBond
  registerWithdrawalAccount(accountNumber: String!, bankCode: Int!): Auth
  replyQueation(id: Int!, reply: String!): QnA
  signin(email: String!): AuthPayload!
  signup(email: String!, nickName: String): AuthPayload!
  updateCreator(age: Int, biography: String, id: Int!, investmentPoint: [CreatorInvestmentPoint!], name: String): Creator
  updateFunding(bondPrice: Int = 10000, bondsTotalNumber: Int = 10000, id: Int!, intro: String, status: FundingStatus, title: String): Funding
  updateNotice(content: String, id: Int!, title: String): Notice
  updatePincode(followingPincode: String!): String
  updateQuestion(content: String, id: Int!, title: String, type: QnATypes): QnA
  withdrawFunding(id: Int!): AccountBond
}

type Notice {
  content: String
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  title: String
  updatedAt: DateTime!
}

type QnA {
  content: String
  createdAt: DateTime!
  id: Int!
  isVisible: Boolean!
  reply: String
  title: String
  type: QnATypes!
  updatedAt: DateTime!
  user: User
}

"""Define QnA Status"""
enum QnAStatus {
  AWAITING_RESPONSE
  RESPONDED
}

"""Define QnA Types"""
enum QnATypes {
  ETC
  INVESTMENT
  SETTLEMENT
}

type Query {
  QnAs: [QnA]
  balanceCash: BigInt
  checkPincode(pincode: String!): Boolean
  creator(id: Int!): Creator
  creators(isVisible: Boolean, skip: Int, sort: String, take: Int): [Creator!]!
  funding(id: Int!): Funding
  fundings(skip: Int, sort: String, status: FundingStatus, take: Int): [Funding!]!
  myFundings(skip: Int, take: Int): [Funding!]!
  myQnA: [QnA]
  notice(id: Int!): Notice
  notices(skip: Int, take: Int): [Notice]
  transactionsBond(ids: [Int], skip: Int, take: Int, type: TransactionType): [TransactionBond!]!
  transactionsCash(skip: Int, take: Int, type: TransactionType): [TransactionCash!]!
  user: User
  verificationCode(email: String!, verificationCode: String!): Boolean!
}

"""Define user roles"""
enum Role {
  ADMIN
  INVESTOR
  MANAGER
}

type TransactionBond {
  account: AccountBond
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type TransactionCash {
  account: AccountCash
  accumulatedCash: BigInt!
  amount: BigInt!
  createdAt: DateTime!
  id: Int!
  title: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type TransactionSettlement {
  account: AccountBond
  additionalSettleMentAmount: BigInt!
  createdAt: DateTime!
  id: Int!
  round: Int!
  settlementAmount: BigInt!
  updatedAt: DateTime!
}

"""Define transaction types - DEPOSIT and WITHDRAW"""
enum TransactionType {
  DEPOSIT
  WITHDRAW
}

type User {
  accountCash: AccountCash
  accountsBond: [AccountBond!]!
  auth: Auth
  createdAt: DateTime!
  email: String!
  favoriteCreators: [Creator]
  favoriteFundings: [Funding]
  id: Int!
  name: String
  role: Role!
  updatedAt: DateTime!
}

type WithdrawalAccount {
  accountNumber: String!
  bankCode: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}